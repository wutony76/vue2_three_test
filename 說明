npm install --save three


// 創建畫佈
PerspectiveCamera( fov : Number, aspect : Number, near : Number, far : Number )具有四个参数:
fov — 摄像机视锥体垂直视野角度。可以理解为人类的视野广度。
aspect — 摄像机视锥体横纵比。渲染结果的横向尺寸和纵向尺寸的比值，这里我们使用的是 浏览器窗口的宽高比。
near — 摄像机视锥体近端面。一切比近面更近的事物将不被渲染。
far — 摄像机视锥体远端面。一切比远面更远的事物将不被渲染，但是设置过大可能会影响性能

const canvas = document.querySelector('#three')
const renderer = new THREE.WebGLRenderer({ canvas, antialias: true })


// 場景
const scene = new THREE.Scene()


// 創建Group
const group = new THREE.Group()


// 載入模型
const gltfLoader = new GLTFLoader()
gltfLoader.load('free_merc_hovercar/scene.gltf', (gltf) => {
  console.log('載入模型 gltf >>>', gltf)
  model = gltf.scene
  console.log('載入模型 gltf.model >>>', model)
  model.traverse((o) => {
    //将图片作为纹理加载
    let explosionTexture = new Three.TextureLoader().load(
      '/free_merc_hovercar/textures/Material.001_baseColor.jpeg'
      // '/free_merc_hovercar/textures/Plane_0_baseColor.png'
    )
    //调整纹理图的方向
    explosionTexture.flipY = false
    //将纹理图生成基础网格材质(MeshBasicMaterial)
    const material = new Three.MeshBasicMaterial({
      map: explosionTexture,
    })
    //给模型每部分上材质
    o.material = material
    //加这句，让模型等每个部分都能产生阴影
    if (o.isMesh) {
      o.castShadow = true
      o.receiveShadow = true
    }
  })
  // scene.add(model)
  group.add(model)
})
